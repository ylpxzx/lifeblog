"""
Django settings for lifeblog project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from conf.config_read import sql

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')^l@31v!oz==tro-fj@#k5yz14i6d8#ys45b-w^7uf(=l1@f!k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',
    'blogger',
    'comment',
    'post',
    'ckeditor',
    'ckeditor_uploader',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lifeblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'static','template')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins':['django.templatetags.static'],
        },
    },
]

WSGI_APPLICATION = 'lifeblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# # sqlsite数据库配置
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# MySQL数据库配置
DATABASES = {
    'default':{
        'ENGINE': 'django.db.backends.mysql',
        'NAME': sql['DB'],
        'USER': sql['USER'],
        'PASSWORD': sql['PASSWORD'],
        'HOST': sql['HOST'],
        'PORT': sql['PORT'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# 配置ImageFile字段图片上传路径
MEDIA_URL = '/media/'  # # 用于指定url路径
MEDIA_ROOT = os.path.join(BASE_DIR, 'static', 'media')  # 用于指定上传文件的存储路径

if DEBUG == False:
    STATIC_ROOT = os.path.join(BASE_DIR,'collected_static') # 用于在（debug=False）生产环境下加载静态文件，参数：在项目根目录创建collected_static目录用于存放移过来静态文件（在生产环境下执行python manage.py collectstatic时，会创建collected_static目录）

# 配置静态文件路径
STATICFILES_DIRS=(
    os.path.join(BASE_DIR,'static','static'),
)



CKEDITOR_UPLOAD_PATH = 'upload/'  # 图片将上传到项目下的media/upload路径下，图片的url是 /media/upload/
CKEDITOR_IMAGE_BACKEND = 'pillow'  # 用于生成图片缩略图，在编辑器里浏览上传的图片

CKEDITOR_CONFIGS = {
    # django-ckeditor默认使用default配置
    'default': {
        # 编辑器宽度自适应
        'width':'auto',
        'height':'250px',
        # tab键转换空格数
        'tabSpaces': 4,
        # 工具栏风格
        # 'toolbar': 'Custom',
        'toolbar':'full', # 完整工具条

        # 自定义工具栏
        # 工具栏按钮
        # 'toolbar_Custom': [
        #     # 表情 代码块
        #     ['Smiley', 'CodeSnippet'],
        #     # 字体风格
        #     ['Bold', 'Italic', 'Underline', 'RemoveFormat', 'Blockquote'],
        #     # 字体颜色
        #     ['TextColor', 'BGColor'],
        #     # 链接
        #     ['Link', 'Unlink'],
        #     # 列表
        #     ['NumberedList', 'BulletedList'],
        #     # 图片
        #     ['Image', 'Link', 'Unlink'],
        #     # 最大化
        #     ['Maximize']
        # ],
        # # 加入代码块插件
        'extraPlugins': ','.join(['codesnippet','prism','uploadimage','widget','lineutils',]),
    }
}

# 隐藏simpleui主页信息
# SIMPLEUI_HOME_INFO = False
# admin自定义菜单栏图标
SIMPLEUI_ICON={
    'Bloggers':'fab fa-blogger',
    'Layouts':'fab fa-themeisle',
    'Links':'fas fa-link',
    'Posts':'fas fa-book',
    'Comments':'far fa-comments',
    'Categorys':'fas fa-tags'
}


# 配置搜索设置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'post.whoosh_cn_backend.WhooshEngine',  # 指定了 django-haystack 使用的搜索引
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),  # 指定了索引文件需要存放的位置，我们设置为项目根目录 BASE_DIR 下的 whoosh_index 文件夹（在建立索引时会自动创建）。
    },
}
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 6  # 指定如何对搜索结果分页，这里设置为每 6 项结果为一页。
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'  # 指定什么时候更新索引，这里我们使用 haystack.signals.RealtimeSignalProcessor，作用是每当有文章更新时就更新索引。由于博客文章更新不会太频繁，因此实时更新没有问题。